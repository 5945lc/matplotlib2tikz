#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# Copyright (C) 2010-2015 Nico Schl√∂mer
#
# This file is part of matplotlib2tikz.
#
# matplotlib2tikz is free software: you can redistribute it and/or modify it
# under the terms of the GNU General Public License as published by the Free
# Software Foundation, either version 3 of the License, or (at your option) any
# later version.
#
# matplotlib2tikz is distributed in the hope that it will be useful, but
# WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
# FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
# more details.
#
# You should have received a copy of the GNU General Public License along with
# matplotlib2tikz.  If not, see <http://www.gnu.org/licenses/>.
#
from os import path
from matplotlib import pyplot as pp
from importlib import import_module

import matplotlib2tikz
import testfunctions

# XXX: There seems to be an issue with the legends that do not appear in the
# pdf versions. The old legends are carried over from the previous run and are
# transfered to the next run. I believe this is a problem with the testing
# method, because if one adds print text in _draw_legend pyplot returns the
# correct legends when this test is run


def _main():
    # get command line arguments
    test_names = _parse_options()

    tex_file_path = './tex/acid.tex'

    # directory where all the generated files will end up
    data_dir = './data'

    # how to get from the LaTeX file to the data
    tex_relative_path_to_data = '../data'

    figure_width = '7.5cm'

    # open file for writing
    file_handle = open(tex_file_path, 'w')

    write_document_header(file_handle, figure_width)

    if test_names:
        test_list = test_names
    else:
        test_list = testfunctions.__all__

    for name in test_list:
        print('Test function %s...' % name)

        # import the test
        test = import_module('testfunctions.' + name)

        pp.cla()
        pp.clf()

        try:
            # plot the test example
            test.plot()
            try:
                tikz_path = path.join(data_dir, name + '.tex')
                tikz_tex_path = path.join(
                        tex_relative_path_to_data,
                        path.basename(tikz_path)
                        )
                # convert to tikz
                matplotlib2tikz.save(
                    tikz_path,
                    figurewidth=figure_width,
                    tex_relative_path_to_data=tex_relative_path_to_data,
                    show_info=False
                    )
                text = '\\input{%s}\n' % tikz_tex_path
                # file_handle.write('\\input{%s}\n' % tikz_tex_path)
            except Exception as e:
                print()
                print(e)
                print()
                text = '%% mpl2tikz conversion failed with\n%% %s\n' % e
                file_handle.write('%%%s\n' % e)
        except Exception as e:
            print()
            print(e)
            print()
            text = '%% Figure generation failed with\n%% %s\n' % e

        # plot reference figure
        pdf_path = path.join(data_dir, name + '.pdf')
        pp.savefig(pdf_path)
        pdf_path = path.join(
                tex_relative_path_to_data,
                path.basename(pdf_path)
                )

        # Open figure, insert PDF
        file_handle.write((
            '%% test plot %s \n'
            '\\begin{figure}%%\n'
            '\\centering%%\n'
            '\\begin{tabular}{cc}\n'
            '\includegraphics[width=\\figwidth]'
            '{%s}%%\n'
            '&\n'
            ) % (name, pdf_path))
        file_handle.write(text)
        # Close the figure
        file_handle.write(
                '\\end{tabular}\n'
                '\\caption{' + test.desc + '.}%\n'
                '\\end{figure}\\clearpage\n\n'
                )
        print('done.')
    write_document_closure(file_handle)
    file_handle.close()
    return


def write_document_header(file_handle, figure_width):
    '''Write the LaTeX document header to the file.
    '''
    file_handle.write('\\documentclass[landscape]{scrartcl}\n'
                      '\\usepackage{graphicx}\n'
                      '\\usepackage{pgfplots}\n'
                      '\\usepgfplotslibrary{groupplots}\n'
                      '\\pgfplotsset{compat=newest}\n\n'
                      '\\newlength\\figwidth%\n'
                      '\\setlength\\figwidth{' + figure_width + '}\n\n'
                      '\\begin{document}\n\n'
                      )
    return


def write_document_closure(file_handle):
    '''Write the LaTeX document closure to the file.
    '''
    file_handle.write('\\end{document}')
    return


def write_file_comparison_entry(file_handle,
                                pdf_path,
                                tikz_path,
                                test_id,
                                comment
                                ):
    '''Write the Tikz vs. PDF comparison figures to the LaTeX file.
    '''
    file_handle.write('% test plot ' + str(test_id) + '\n'
                      '\\begin{figure}%\n'
                      '\\centering%\n'
                      '\\begin{tabular}{cc}\n'
                      '\includegraphics[width=\\figwidth]'
                      '{' + str(pdf_path) + '}%\n'
                      '&\n'
                      '\input{' + str(tikz_path) + '}%\n'
                      '\\end{tabular}\n'
                      '\\caption{' + str(comment) + ' (test ID ' +
                      str(test_id) + ').}%\n'
                      '\\end{figure}\\clearpage\n\n'
                      )
    return


def _parse_options():
    '''Parse input options.'''
    import argparse
    parser = argparse.ArgumentParser(
            description='Acid test for matplotlib2tikz.'
            )
    parser.add_argument('--tests', '-t',
                        metavar='TEST_NAMES',
                        nargs='+',
                        type=str,
                        help='tests to perform'
                        )
    args = parser.parse_args()
    return args.tests


if __name__ == '__main__':
    # execute the test
    _main()
